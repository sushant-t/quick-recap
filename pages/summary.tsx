import InputForm from "@/components/InputForm";
import Head from "next/head";
import React, { useState } from "react";
import toast, { Toaster } from "react-hot-toast";
import styles from "@/styles/Summary.module.css";

function Summary() {
  const [loading, setLoading] = useState(false);
  const [text, setText] = useState("");
  const [transcript, setTranscript] = useState("");

  const maxTokens = 600;

  const generateSummary = async (
    e: any,
    url: string,
    file: ReadableStream | undefined
  ) => {
    e.preventDefault();
    setLoading(true);
    setText("");
    let response = await fetch("/api/transcribe", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        vidURL: url,
        vidStream: file,
      }),
    });

    if (!response.ok) {
      throw new Error(response.statusText);
    }

    // This data is a ReadableStream
    console.log(response.body);
    let data = response.body;
    if (!data) {
      return;
    }

    let reader = data.getReader();
    let decoder = new TextDecoder();
    let done = false;

    let firstChunk = true;

    console.log("parsing transcript");
    let total = "";
    while (!done) {
      const { value, done: doneReading } = await reader.read();
      done = doneReading;
      let chunkValue = decoder.decode(value);
      if (firstChunk) {
        firstChunk = false;
        chunkValue = chunkValue.trimStart();
      }
      total += chunkValue;
    }

    // setTranscript(total);

    console.log("transcript saved, generating summary");

    const summaryPrompt = `Generate a summary USING BULLET POINTS of a video with the following transcript: ${total}`;
    response = await fetch("/api/summarize", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        prompt: summaryPrompt,
        maxTokens: maxTokens,
      }),
    });
    if (!response.ok) {
      throw new Error(response.statusText);
    }

    // This data is a ReadableStream
    data = response.body;
    if (!data) {
      return;
    }

    reader = data.getReader();
    decoder = new TextDecoder();
    done = false;
    let priorChunk = "";
    firstChunk = true;

    console.log("setting summary");
    while (!done) {
      const { value, done: doneReading } = await reader.read();
      done = doneReading;
      let chunkValue = decoder.decode(value);
      if (firstChunk || priorChunk.substring(priorChunk.length - 1) == "\n")
        chunkValue = chunkValue.replace("-", "\u2022");
      console.log(chunkValue);
      setText((prev) => prev + chunkValue);
      priorChunk = chunkValue;
      firstChunk = false;
    }
    setLoading(false);
  };
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <div className="flex w-9/12 flex-col mx-auto py-2 min-h-screen">
          <InputForm onSubmit={generateSummary} submitText="Summarize" />
          <Toaster
            position="top-center"
            reverseOrder={false}
            toastOptions={{ duration: 2000 }}
          />
          <div className="space-y-10 my-10">
            {text && (
              <>
                <div>
                  <h1 className="flex justify-center mt-32 w-full mb-2 text-5xl mx-auto font-medium leading-tight text-primary">
                    Summary
                  </h1>
                </div>
                <div className="space-y-8 flex flex-col items-center justify-center mx-auto max-w-full whitespace-pre">
                  <div
                    className="bg-white rounded-xl shadow-md p-4 hover:bg-gray-100 transition cursor-copy border"
                    onClick={() => {
                      navigator.clipboard.writeText(text.toString());
                      toast("Transcript copied to clipboard", {
                        icon: "✂️",
                      });
                    }}
                  >
                    <p className={styles.transcription}>{text}</p>
                  </div>
                </div>
              </>
            )}
          </div>
        </div>
      </main>
    </>
  );
}

export default Summary;
